import numpy as np
import matplotlib
import matplotlib.pyplot as plt 
from sklearn import datasets
from sklearn import feature_selection
from sklearn import metrics
from sklearn.ensemble import IsolationForest
import sklearn
import pandas as pd
from datetime import datetime


#Datasets split into training period between 2017-2021, testing datasets 2021-2022

data1 = pd.read_csv(r'C:\Users\George\Documents\Physics\Year 3\Part 2\Group Project\Data\data 1.csv',index_col=0)
data1=data1.replace(0,np.NaN)
data1['Date'] = pd.to_datetime(data1['Date'])
train1 = data1[(data1['Date'] < '2022-01-01')]
test1 = data1[(data1['Date'] > '2022-01-01')]


data2 = pd.read_csv(r'C:\Users\George\Documents\Physics\Year 3\Part 2\Group Project\Data\data 2.csv',index_col=0)
data2['Date'] = pd.to_datetime(data2['Date'])
data2=data2.replace(0,np.NaN)
train2 = data2[(data2['Date'] < '2022-01-01')]
test2 = data2[(data2['Date'] > '2022-01-01')]


#Creating individual datasets for our currencies

GBPtrain1= train1.loc[train1['Currency'] == 'GBP']
GBPtrain1=GBPtrain1.drop(labels=['Currency'], axis=1)
EURtrain1= train1.loc[train1['Currency'] == 'EUR']
EURtrain1=EURtrain1.drop(labels=['Currency'], axis=1)
CADtrain1= train1.loc[train1['Currency'] == 'CAD']
CADtrain1=CADtrain1.drop(labels=['Currency'], axis=1)
JPYtrain1= train1.loc[train1['Currency'] == 'JPY']
JPYtrain1=JPYtrain1.drop(labels=['Currency'], axis=1)
AUDtrain1= train1.loc[train1['Currency'] == 'AUD']
AUDtrain1=AUDtrain1.drop(labels=['Currency'], axis=1)
NOKtrain1= train1.loc[train1['Currency'] == 'NOK']
NOKtrain1=NOKtrain1.drop(labels=['Currency'], axis=1)
HUFtrain1= train1.loc[train1['Currency'] == 'HUF']
HUFtrain1=HUFtrain1.drop(labels=['Currency'], axis=1)
CNHtrain1= train1.loc[train1['Currency'] == 'CNH']
CNHtrain1=CNHtrain1.drop(labels=['Currency'], axis=1)

GBPtest1= test1.loc[test1['Currency'] == 'GBP']
GBPtest1=GBPtest1.drop(labels=['Currency'], axis=1)
EURtest1= test1.loc[test1['Currency'] == 'EUR']
EURtest1=EURtest1.drop(labels=['Currency'], axis=1)
CADtest1= test1.loc[test1['Currency'] == 'CAD']
CADtest1=CADtest1.drop(labels=['Currency'], axis=1)
JPYtest1= test1.loc[test1['Currency'] == 'JPY']
JPYtest1=JPYtest1.drop(labels=['Currency'], axis=1)
AUDtest1= test1.loc[test1['Currency'] == 'AUD']
AUDtest1=AUDtest1.drop(labels=['Currency'], axis=1)
NOKtest1= test1.loc[test1['Currency'] == 'NOK']
NOKtest1=NOKtest1.drop(labels=['Currency'], axis=1)
HUFtest1= test1.loc[test1['Currency'] == 'HUF']
HUFtest1=HUFtest1.drop(labels=['Currency'], axis=1)
CNHtest1= test1.loc[test1['Currency'] == 'CNH']
CNHtest1=CNHtest1.drop(labels=['Currency'], axis=1)



GBPtrain2= train2.loc[train2['Currency'] == 'GBP']
GBPtrain2=GBPtrain2.drop(labels=['Currency'], axis=1)
EURtrain2= train2.loc[train2['Currency'] == 'EUR']
EURtrain2=EURtrain2.drop(labels=['Currency'], axis=1)
CADtrain2= train2.loc[train2['Currency'] == 'CAD']
CADtrain2=CADtrain2.drop(labels=['Currency'], axis=1)
JPYtrain2= train2.loc[train2['Currency'] == 'JPY']
JPYtrain2=JPYtrain2.drop(labels=['Currency'], axis=1)
AUDtrain2= train2.loc[train2['Currency'] == 'AUD']
AUDtrain2=AUDtrain2.drop(labels=['Currency'], axis=1)
NOKtrain2= train2.loc[train2['Currency'] == 'NOK']
NOKtrain2=NOKtrain2.drop(labels=['Currency'], axis=1)
HUFtrain2= train2.loc[train2['Currency'] == 'HUF']
HUFtrain2=HUFtrain2.drop(labels=['Currency'], axis=1)
CNHtrain2= train2.loc[train2['Currency'] == 'CNH']
CNHtrain2=CNHtrain2.drop(labels=['Currency'], axis=1)

GBPtest2= test2.loc[test2['Currency'] == 'GBP']
GBPtest2=GBPtest2.drop(labels=['Currency'], axis=1)
EURtest2= test2.loc[test2['Currency'] == 'EUR']
EURtest2=EURtest2.drop(labels=['Currency'], axis=1)
CADtest2= test2.loc[test2['Currency'] == 'CAD']
CADtest2=CADtest2.drop(labels=['Currency'], axis=1)
JPYtest2= test2.loc[test2['Currency'] == 'JPY']
JPYtest2=JPYtest2.drop(labels=['Currency'], axis=1)
AUDtest2= test2.loc[test2['Currency'] == 'AUD']
AUDtest2=AUDtest2.drop(labels=['Currency'], axis=1)
NOKtest2= test2.loc[test2['Currency'] == 'NOK']
NOKtest2=NOKtest2.drop(labels=['Currency'], axis=1)
HUFtest2= test2.loc[test2['Currency'] == 'HUF']
HUFtest2=HUFtest2.drop(labels=['Currency'], axis=1)
CNHtest2= test2.loc[test2['Currency'] == 'CNH']
CNHtest2=CNHtest2.drop(labels=['Currency'], axis=1)

#Sliding window Function in Isolation Forest
#currencytrain & currencytest should be the same currency
#window can be adjusted for window size
def SlidingIF(currencytrain,currencytest, window):
    
    #Building IF Model
    model = IsolationForest(contamination=0.01,random_state=42)
    anomaly_inputs = ['Spot Rate','1W Rate','2W Rate','3W Rate','1M Rate','2M Rate', '3M Rate', '4M Rate', '6M Rate', '9M Rate', '1Y Rate', '2Y Rate', '3Y Rate', '4Y Rate', '5Y Rate', '10Y Rate']
    currencytest['Scores']=""
    
    #For loop for window in training model, overlap can be adjusted here
    for i in range(0,len(currencytrain) - window + 1,25):
        
        #Extract data for the current window
        window_data = currencytrain.iloc[i:i + window, :]


        # Fit the model on the current window
        model.fit(window_data[anomaly_inputs])
        
    #For loop for window in testing model, window should be same size and overlap as for training    
    for i in range(0,len(currencytest) - window + 1,25):
        
         #Extract data for the current window
        window_data = currencytest.iloc[i:i + window, :]

        # Predict anomaly scores in the current window
        scores=model.decision_function(window_data[anomaly_inputs])
        print(scores)
        
     

SlidingIF(AUDtrain1,AUDtest1,50)
